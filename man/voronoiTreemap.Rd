% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/voronoi.R
\name{voronoiTreemap}
\alias{voronoiTreemap}
\title{voronoiTreemap}
\usage{
voronoiTreemap(data, levels, fun = sum, sort = TRUE, filter = 5e-04,
  cell.size = NULL, cell.color = levels[1], cols = c("royalblue",
  "chartreuse3", "darkgoldenrod1", "red"), border.size = 6,
  border.color = grey(0.8), labels = levels[length(levels)],
  label.col = grey(0.5), maxIteration = 50, debug = FALSE)
}
\arguments{
\item{data}{(data.frame) A data.frame with one column for each hierarchical level}

\item{levels}{(character) Character vector indicating the column names to 
be used. The order of names must correspond to the hierarchical levels, 
going from broad to fine}

\item{fun}{(function) Function to be used to aggregate cell sizes of parental cells}

\item{sort}{(logical) Should the columns of the data.frame be sorted before?}

\item{filter}{(logical) Filter the supplied data frame to remove very small
cells that would not be visible. The default is to remove cells with a 
relative target area below 0.0005, or 0.05%. The algorithm can still fail
so it can be worthwhile to simply rerun the function, probably applying a
stricter threshold.}

\item{cell.size}{(character) Indicates the column used to control cell size. 
Can be one of \code{levels}}

\item{cell.color}{(character) Indicates the column used to control cell color. 
Can be one of \code{levels}}

\item{cols}{(character) A character vector of colors used to fill cells.}

\item{border.size}{(character) The initial line width of the highest level 
cells. Is reduced each level.}

\item{border.color}{(numeric) Color for cell borders.}

\item{labels}{(character) The column name indicating the hierarchical level 
used for cell labels, or NULL to omit drawing labels. The default is the
lowest level.}

\item{label.col}{(character) Color for cell labels.}

\item{maxIteration}{(numeric) Force algorithm to stop at this number of iterations
for each parent cell. The algorithm usually converges to an acceptable 
solution fairly quickly, so it seems reasonable to restrict this number
in order to save computation time. However, more iterations give higher
accuracy.}

\item{debug}{(logical) If debug is TRUE (default is FALSE), the solution 
for each iteration is drawn to the viewport to allow some visual 
inspection. The weights, target area, and difference are printed to the 
console. Use with care, this makes treemap generation much slower!}
}
\value{
A named list with grid graphical objects for polygons and labels.
}
\description{
Create nested additively weighted Voronoi treemaps.
}
\details{
This is a recursive wrapper function, making use of the original implementation 
of the voronoi tesselation from Paul Murrell, University of Auckland.
The original functions were obtained and slightly modified from
\url{https://www.stat.auckland.ac.nz/~paul/Reports/VoronoiTreemap/voronoiTreeMap.html}
This function returns a list of graphical objects instead of a plot. In order 
to actually draw the treemap, use \code{\link{drawTreemap}}.
}
\examples{

}
\seealso{
\code{\link{drawTreemap}} for drawing the treemap.
}
